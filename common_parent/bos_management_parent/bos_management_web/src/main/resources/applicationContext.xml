<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:amq="http://activemq.apache.org/schema/core" xmlns:jms="http://www.springframework.org/schema/jms"
       xmlns:jaxrs="http://cxf.apache.org/jaxrs"
       xmlns:elasticsearch="http://www.springframework.org/schema/data/elasticsearch"
       xsi:schemaLocation="
						http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
						http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
						http://www.springframework.org/schema/data/jpa 
						http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
						http://www.springframework.org/schema/jms
				        http://www.springframework.org/schema/jms/spring-jms.xsd
						http://activemq.apache.org/schema/core
				        http://activemq.apache.org/schema/core/activemq-core-5.8.0.xsd
				        http://cxf.apache.org/jaxrs 
				        http://cxf.apache.org/schemas/jaxrs.xsd
				        http://www.springframework.org/schema/data/elasticsearch
						http://www.springframework.org/schema/data/elasticsearch/spring-elasticsearch-1.0.xsd">

    <!-- 连接池 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="oracle.jdbc.driver.OracleDriver"/>
        <property name="jdbcUrl" value="jdbc:oracle:thin:@192.168.172.10:1521:ORCL"/>
        <property name="user" value="zhangzuolin"/>
        <property name="password" value="1234"/>
    </bean>

    <!-- spring整合JPA -->
    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan" value="cn.itcast.bos.domain"/>
        <!-- 指定持久层提供者为Hibernate -->
        <property name="persistenceProvider">
            <bean class="org.hibernate.ejb.HibernatePersistence"/>
        </property>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <!-- 自动建表 -->
                <property name="generateDdl" value="true"/>
                <property name="database" value="ORACLE"/>
                <property name="databasePlatform" value="org.hibernate.dialect.Oracle10gDialect"/>
                <property name="showSql" value="true"/>
            </bean>
        </property>
        <property name="jpaDialect">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect"/>
        </property>
    </bean>

    <!-- 事务管理器 -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <!-- 组件扫描 @Service @Controller @Repository -->
    <context:component-scan
            base-package="cn.itcast.bos.service,cn.itcast.bos.web,cn.itcast.activemq"/>

    <!-- 事务注解支持:@Transactional -->
    <tx:annotation-driven transaction-manager="transactionManager"
                          proxy-target-class="true"/>

    <!-- 整合 spring data jpa -->
    <jpa:repositories base-package="cn.itcast.bos.dao"/>
    <!-- ActiveMQ 连接工厂 -->
    <!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供 -->
    <!-- 如果连接网络：tcp://ip:61616；未连接网络：tcp://localhost:61616 以及用户名，密码 -->
    <amq:connectionFactory id="amqConnectionFactory"
                           brokerURL="tcp://localhost:61616" userName="admin" password="admin"/>

    <!-- Spring Caching连接工厂 -->
    <!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->
    <bean id="connectionFactory"
          class="org.springframework.jms.connection.CachingConnectionFactory">
        <!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->
        <property name="targetConnectionFactory" ref="amqConnectionFactory"></property>
        <!-- 同上，同理 -->
        <!-- <constructor-arg ref="amqConnectionFactory" /> -->
        <!-- Session缓存数量 -->
        <property name="sessionCacheSize" value="100"/>
    </bean>
    <!-- 消息消费者 start -->
    <!-- 定义Queue监听器 -->
    <jms:listener-container destination-type="queue" container-type="default" connection-factory="connectionFactory"
                            acknowledge="auto">
        <jms:listener destination="test.queue" ref="queueReceiver1"/>
        <jms:listener destination="test.queue" ref="queueReceiver2"/>
    </jms:listener-container>

    <jms:listener-container destination-type="queue" container-type="default" connection-factory="connectionFactory"
                            acknowledge="auto">
        <jms:listener destination="test.map" ref="queueReceiver3"/>
    </jms:listener-container>

    <!-- 定义Topic监听器 -->
    <jms:listener-container destination-type="topic" container-type="default" connection-factory="connectionFactory"
                            acknowledge="auto">
        <jms:listener destination="test.topic" ref="topicReceiver1"/>
        <jms:listener destination="test.topic" ref="topicReceiver2"/>
    </jms:listener-container>
    <!-- 消息消费者 end -->
    <!-- <jaxrs:server>发布订单服务 -->
    <jaxrs:server address="/orderservice">
        <jaxrs:serviceBeans>
            <ref bean="orderRemoteService"/>
        </jaxrs:serviceBeans>
    </jaxrs:server>
    <bean id="orderRemoteService" class="cn.itcast.bos.service.impl.OrderRemoteServiceImpl"/>

    <!-- <jaxrs:server>发布宣传任务服务 -->
    <jaxrs:server address="/promotionservice">
        <jaxrs:serviceBeans>
            <ref bean="promotionRemoteService"/>
        </jaxrs:serviceBeans>
    </jaxrs:server>
    <bean id="promotionRemoteService" class="cn.itcast.bos.service.impl.PromotionRemoteServiceImpl"/>
    <!-- elasticsearch配置项 -->
    <!-- 扫描Dao包，自动创建实例 -->
    <elasticsearch:repositories base-package="cn.itcast.bos.index"/>
    <!-- 配置elasticSearch的连接 -->
    <elasticsearch:transport-client id="client" cluster-nodes="localhost:9300"/>
    <!-- spring data elasticSearcheDao 必须继承 ElasticsearchTemplate -->
    <bean id="elasticsearchTemplate" class="org.springframework.data.elasticsearch.core.ElasticsearchTemplate">
        <constructor-arg name="client" ref="client"></constructor-arg>
    </bean>
    <!-- 配置shiro过滤器工厂bean -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- 注入安全管理器：securityManager -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 注入登录失败跳转界面：loginUrl -->
        <property name="loginUrl" value="/login.jsp"/>
        <!-- 注入登录成功跳转界面：successUrl -->
        <property name="successUrl" value="/index.jsp"/>
        <!-- 注入权限不足跳转界面：unauthorizedUrl -->
        <property name="unauthorizedUrl" value="/unauthorizedUrl.jsp"/>
        <!-- 注入权限校验规则：filterChainDefinitions -->
        <property name="filterChainDefinitions">
            <value>
                /login.jsp = anon
                /js/** = anon
                /css/** = anon
                /images/** = anon
                /validatecode.jsp* = anon
                /userAction_login.action = anon
                /pages/base/courier.jsp = perms["courier"]
                /** = authc
            </value>
        </property>
    </bean>
    <!-- 配置shiro安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- 注入自定义realm -->
        <property name="realm" ref="bosLoginRealm"/>
        <!-- 注入缓存管理器 -->
        <property name="cacheManager" ref="ehcachenManager"/>
    </bean>
    <!-- 配置自定义realm -->
    <bean id="bosLoginRealm" class="cn.itcast.bos.realm.BosLoginRealm"/>
    <!-- 配置自动代理 -->
    <bean id="defaultAdvisorAutoProxyCreator"
          class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator">
        <!-- 常见的代理方式： 第一种：cglib代理，基于继承实现代理 UserAction - 目标类 ProxyAction extends
            UserAction - 代理类 第二种：java代理，基于接口实现代理 UserAction implements ModelDriven -
            目标类 ProxyAction implements ModelDriven - 代理类 proxyTargetClass：配置生成代理的方式，true-第一种，cglib；false-第二种，java代理 -->
        <property name="proxyTargetClass" value="true"/>
    </bean>
    <!-- 配置切面 -->
    <bean id="authorizationAttributeSourceAdvisor"
          class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
    <!-- 配置缓存管理器 -->
    <bean id="ehcachenManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>

    <!-- 注册自定义的Job -->
    <bean id="mailJob" class="cn.itcast.bos.jobs.MailJob"></bean>

    <!-- 注册JobDetail，负责通过反射调用Job -->
    <bean id="jobDetail"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <!-- 注入目标对象 -->
        <property name="targetObject" ref="mailJob"/>
        <!-- 注入目标方法 -->
        <property name="targetMethod" value="sendMail"/>
    </bean>

    <!-- 注册触发器，指定触发时间 -->
    <bean id="myTrigger"
          class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="jobDetail"/>
        <!-- 表达式，用于定义触发的时间 -->
        <property name="cronExpression">
            <!-- 每隔20秒触发一次 -->
            <value>0 0 12,16 * * ?</value>
        </property>
    </bean>

    <!-- 注册调度工厂，统一进行任务调度 -->
    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="myTrigger"/>
            </list>
        </property>
    </bean>
</beans>